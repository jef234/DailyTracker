"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/daily-tracker",{

/***/ "./src/lib/db.js":
/*!***********************!*\
  !*** ./src/lib/db.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addJiraEntry: function() { return /* binding */ addJiraEntry; },\n/* harmony export */   deleteJiraEntry: function() { return /* binding */ deleteJiraEntry; },\n/* harmony export */   getJiraEntries: function() { return /* binding */ getJiraEntries; },\n/* harmony export */   getUniqueJiraEntries: function() { return /* binding */ getUniqueJiraEntries; },\n/* harmony export */   updateJiraEntry: function() { return /* binding */ updateJiraEntry; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"./src/lib/supabase.js\");\n\nconst addJiraEntry = async (param)=>{\n    let { jira_number, jira_title, log_message, jira_status, date, user_id } = param;\n    try {\n        // First, check if an entry with the same jira_number, jira_title, and date exists\n        const { data: existingEntry, error: checkError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"jira_entries\").select(\"*\").eq(\"jira_number\", jira_number).eq(\"jira_title\", jira_title).eq(\"user_id\", user_id).eq(\"date\", date).single();\n        if (checkError && checkError.code !== \"PGRST116\") {\n            throw checkError;\n        }\n        if (existingEntry) {\n            // If entry exists with same date, return error\n            return {\n                data: null,\n                error: \"A log entry for this JIRA and date already exists. Please use a different date or update the existing entry.\"\n            };\n        }\n        // If no entry exists with same date, create new entry\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"jira_entries\").insert([\n            {\n                jira_number,\n                jira_title,\n                log_message,\n                jira_status,\n                date,\n                user_id\n            }\n        ]).select();\n        if (error) throw error;\n        return {\n            data,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Error adding JIRA entry:\", error);\n        return {\n            data: null,\n            error: error.message\n        };\n    }\n};\nconst getJiraEntries = async (userId)=>{\n    try {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"jira_entries\").select(\"*\").eq(\"user_id\", userId).order(\"date\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return {\n            data,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Error fetching JIRA entries:\", error);\n        return {\n            data: null,\n            error: error.message\n        };\n    }\n};\nconst getUniqueJiraEntries = async (userId)=>{\n    try {\n        // First, get the most recent entry for each JIRA number and title combination\n        const { data: recentEntries, error: recentError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"jira_entries\").select(\"jira_number, jira_title, jira_status, created_at\").eq(\"user_id\", userId).order(\"created_at\", {\n            ascending: false\n        });\n        if (recentError) throw recentError;\n        // Get unique entries based on jira_number and jira_title combination\n        // Only include entries where the most recent status is not 'Done'\n        const uniqueEntries = recentEntries.reduce((acc, current)=>{\n            const exists = acc.find((item)=>item.jira_number === current.jira_number && item.jira_title === current.jira_title);\n            // Only add if it doesn't exist and the status is not 'Done'\n            if (!exists && current.jira_status !== \"Done\") {\n                acc.push({\n                    jira_number: current.jira_number,\n                    jira_title: current.jira_title,\n                    jira_status: current.jira_status\n                });\n            }\n            return acc;\n        }, []);\n        return {\n            data: uniqueEntries,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Error fetching unique JIRA entries:\", error);\n        return {\n            data: null,\n            error: error.message\n        };\n    }\n};\nconst deleteJiraEntry = async (id, userId)=>{\n    try {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"jira_entries\").delete().eq(\"id\", id).eq(\"user_id\", userId);\n        if (error) throw error;\n        return {\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Error deleting JIRA entry:\", error);\n        return {\n            error\n        };\n    }\n};\nconst updateJiraEntry = async (id, param, userId)=>{\n    let { log_message, jira_status, date } = param;\n    try {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"jira_entries\").update({\n            log_message,\n            jira_status,\n            date,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", id).eq(\"user_id\", userId).select();\n        if (error) throw error;\n        return {\n            data,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Error updating JIRA entry:\", error);\n        return {\n            data: null,\n            error: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/db.js\n"));

/***/ })

});